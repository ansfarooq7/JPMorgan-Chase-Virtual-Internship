{"version":3,"sources":["../../src/js/websocket.js"],"names":["Client","Server","HEARTBEAT_TIMEOUT","CLIENT_ID_GEN","WebSocketClient","constructor","ws","_ws","binaryType","onopen","send","id","cmd","heartbeat","setTimeout","onmessage","msg","data","_pending_arrow","result","_pending_port_id","undefined","new_data_with_port_id","port_id","delta","_handle","JSON","parse","is_transferable","args","length","ArrayBuffer","byteLength","pre_msg","stringify","terminate","Promise","resolve","onclose","close","WebSocketManager","requests_id_map","Map","requests","websockets","setInterval","Object","entries","forEach","isAlive","add_connection","on","_is_transferable","buffer","new_args","_is_transferable_pre_message","concat","slice","compoundId","set","process","e","console","error","clear_views","post","transferable","req","readyState","Error","get","subscribe","delete","_host","cache","name","input","on_delete","host_table","table","_tables","host_view","view","_views","eject_table","eject_view"],"mappings":"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","sourcesContent":["import {Client} from \"./api/client.js\";\nimport {Server} from \"./api/server.js\";\n\nconst HEARTBEAT_TIMEOUT = 15000;\nlet CLIENT_ID_GEN = 0;\n\nexport class WebSocketClient extends Client {\n    constructor(ws) {\n        super();\n        this._ws = ws;\n        this._ws.binaryType = \"arraybuffer\";\n        this._ws.onopen = () => {\n            this.send({id: -1, cmd: \"init\"});\n        };\n        const heartbeat = () => {\n            this._ws.send(\"heartbeat\");\n            setTimeout(heartbeat, HEARTBEAT_TIMEOUT);\n        };\n        setTimeout(heartbeat, 15000);\n        this._ws.onmessage = msg => {\n            if (msg.data === \"heartbeat\") {\n                return;\n            }\n            if (this._pending_arrow) {\n                let result = {\n                    data: {\n                        id: this._pending_arrow,\n                        data: msg.data\n                    }\n                };\n\n                // make sure on_update callbacks are called with a `port_id`\n                // AND the transferred arrow.\n                if (this._pending_port_id !== undefined) {\n                    const new_data_with_port_id = {\n                        port_id: this._pending_port_id,\n                        delta: msg.data\n                    };\n                    result.data.data = new_data_with_port_id;\n                }\n                this._handle(result);\n                delete this._pending_port_id;\n                delete this._pending_arrow;\n            } else {\n                msg = JSON.parse(msg.data);\n\n                // If the `is_transferable` flag is set, the worker expects the\n                // next message to be a transferable object. This sets the\n                // `_pending_arrow` flag, which triggers a special handler for\n                // the ArrayBuffer containing arrow data.\n                if (msg.is_transferable) {\n                    this._pending_arrow = msg.id;\n\n                    // Check whether the message also contains a `port_id`,\n                    // indicating that we are in an `on_update` callback and\n                    // the pending arrow needs to be joined with the port_id\n                    // for on_update handlers to work properly.\n                    if (msg.data && msg.data.port_id !== undefined) {\n                        this._pending_port_id = msg.data.port_id;\n                    }\n                } else {\n                    this._handle({data: msg});\n                }\n            }\n        };\n    }\n\n    /**\n     * Send a message to the remote, checking whether the arguments contain an\n     * ArrayBuffer.\n     *\n     * @param {Object} msg a message to send to the remote. If the `args`\n     * param contains an ArrayBuffer, two messages will be sent - a pre-message\n     * with the `is_transferable` flag set to true, and a second message\n     * containing the ArrayBuffer. This allows for transport of metadata\n     * alongside an ArrayBuffer, and the pattern should be implemented by the\n     * receiver.\n     */\n    send(msg) {\n        if (msg.args && msg.args.length > 0 && msg.args[0] instanceof ArrayBuffer && msg.args[0].byteLength !== undefined) {\n            const pre_msg = msg;\n            msg.is_transferable = true;\n            this._ws.send(JSON.stringify(pre_msg));\n            this._ws.send(msg.args[0]);\n            return;\n        }\n        this._ws.send(JSON.stringify(msg));\n    }\n\n    terminate() {\n        return new Promise(resolve => {\n            this._ws.onclose = resolve;\n            this._ws.close();\n        });\n    }\n}\n\n/**\n * A WebSocket Manager instance for a remote perspective\n */\nexport class WebSocketManager extends Server {\n    constructor(...args) {\n        super(...args);\n        this.requests_id_map = new Map();\n        this.requests = {};\n        this.websockets = {};\n\n        // clear invalid connections\n        setInterval(() => {\n            Object.entries(this.websockets).forEach(([id, ws]) => {\n                if (ws.isAlive === false) {\n                    delete this.websockets[id];\n                    return ws.terminate();\n                }\n                ws.isAlive = false;\n            });\n        }, 30000);\n    }\n\n    /**\n     * Add a new websocket connection to the manager, and define a handler\n     * for all incoming messages. If the incoming message has `is_transferable`\n     * set, handle incoming `ArrayBuffers` correctly.\n     *\n     * The WebsocketManager manages the websocket connection and processes every\n     * message received from each connections. When a websocket connection is\n     * `closed`, the websocket manager will clear all subscriptions associated\n     * with the connection.\n     *\n     * @param {WebSocket} ws a websocket connection\n     */\n    add_connection(ws) {\n        ws.isAlive = true;\n        ws.binaryType = \"arraybuffer\";\n        ws.id = CLIENT_ID_GEN++;\n\n        // Parse incoming messages\n        ws.on(\"message\", msg => {\n            ws.isAlive = true;\n\n            if (msg === \"heartbeat\") {\n                ws.send(\"heartbeat\");\n                return;\n            }\n\n            if (this._is_transferable) {\n                // Combine ArrayBuffer and previous message so that metadata can\n                // be reconstituted.\n                const buffer = msg;\n                let new_args = [buffer];\n                msg = this._is_transferable_pre_message;\n\n                if (msg.args && msg.args.length > 1) {\n                    new_args = new_args.concat(msg.args.slice(1));\n                }\n\n                msg.args = new_args;\n                delete msg.is_transferable;\n\n                this._is_transferable = false;\n                this._is_transferable_pre_message = undefined;\n            } else {\n                msg = JSON.parse(msg);\n\n                if (msg.is_transferable) {\n                    this._is_transferable = true;\n                    this._is_transferable_pre_message = msg;\n                    return;\n                }\n            }\n\n            try {\n                // Send all messages to the handler defined in\n                // Perspective.Server\n                const compoundId = `${msg.id}/${ws.id}`;\n                this.requests_id_map.set(compoundId, msg.id);\n                msg.id = compoundId;\n                this.requests[msg.id] = {ws, msg};\n                this.process(msg, ws.id);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n        ws.on(\"close\", () => {\n            this.clear_views(ws.id);\n        });\n        ws.on(\"error\", console.error);\n    }\n\n    /**\n     * Send an asynchronous message to the Perspective web worker.\n     *\n     * If the `transferable` param is set, pass two messages: the string\n     * representation of the message and then the ArrayBuffer data that needs to\n     * be transferred. The `is_transferable` flag tells the client to expect the\n     * next message to be a transferable object.\n     *\n     * @param {Object} msg a valid JSON-serializable message to pass to the\n     * client\n     * @param {*} transferable a transferable object to be sent to the client\n     */\n    post(msg, transferable) {\n        const req = this.requests[msg.id];\n        const id = msg.id;\n        if (req.ws.readyState > 1) {\n            delete this.requests[id];\n            throw new Error(\"Connection closed\");\n        }\n        msg.id = this.requests_id_map.get(id);\n        if (transferable) {\n            msg.is_transferable = true;\n            req.ws.send(JSON.stringify(msg));\n            req.ws.send(transferable[0]);\n        } else {\n            req.ws.send(JSON.stringify(msg));\n        }\n        if (!req.msg.subscribe) {\n            this.requests_id_map.delete(id);\n            delete this.requests[id];\n        }\n    }\n\n    _host(cache, name, input) {\n        if (cache[name] !== undefined) {\n            throw new Error(`\"${name}\" already exists`);\n        }\n        input.on_delete(() => {\n            delete cache[name];\n        });\n        cache[name] = input;\n    }\n\n    /**\n     * Expose a Perspective `table` through the WebSocket, allowing\n     * it to be accessed by a unique name from a client.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     * @param {perspective.table} table `table` to host.\n     */\n    host_table(name, table) {\n        this._host(this._tables, name, table);\n    }\n\n    /**\n     * Expose a Perspective `view` through the WebSocket, allowing\n     * it to be accessed by a unique name from a client.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     * @param {perspective.view} view `view` to host.\n     */\n    host_view(name, view) {\n        this._host(this._views, name, view);\n    }\n\n    /**\n     * Cease hosting a `table` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_table(name) {\n        delete this._tables[name];\n    }\n\n    /**\n     * Cease hosting a `view` on this server.  Hosted objects\n     * are automatically `eject`ed when their `delete()` method is called.\n     *\n     * @param {String} name\n     */\n    eject_view(name) {\n        delete this._views[name];\n    }\n}\n"],"file":"websocket.js"}