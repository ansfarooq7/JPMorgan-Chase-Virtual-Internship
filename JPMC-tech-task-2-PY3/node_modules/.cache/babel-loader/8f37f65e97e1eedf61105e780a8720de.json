{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\src\\\\App.tsx\";\nimport React, { Component } from 'react';\nimport DataStreamer from './DataStreamer';\nimport Graph from './Graph';\nimport './App.css';\n/**\r\n * State declaration for <App />\r\n */\n\n/**\r\n * The parent element of the react app.\r\n * It renders title, button and Graph react element.\r\n */\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      // data saves the server responds.\n      // We use this state to parse data down to the child element (Graph) as element property\n      data: []\n    };\n    return _this;\n  }\n  /**\r\n   * Render Graph react component with state.data parse as property data\r\n   */\n\n\n  _createClass(App, [{\n    key: \"renderGraph\",\n    value: function renderGraph() {\n      return React.createElement(Graph, {\n        data: this.state.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n    }\n    /**\r\n     * Get new data from server and update the state with the new data\r\n     */\n\n  }, {\n    key: \"getDataFromServer\",\n    value: function getDataFromServer() {\n      var _this2 = this;\n\n      DataStreamer.getData(function (serverResponds) {\n        // Update the state by creating a new array of data that consists of\n        // Previous data in the state and the new data from server\n        _this2.setState({\n          data: [].concat(_toConsumableArray(_this2.state.data), _toConsumableArray(serverResponds))\n        });\n      });\n    }\n    /**\r\n     * Render the App react component\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Bank & Merge Co Task 2\"), React.createElement(\"div\", {\n        className: \"App-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary Stream-button\" // when button is click, our react app tries to request\n        // new data from the server.\n        // As part of your task, update the getDataFromServer() function\n        // to keep requesting the data every 100ms until the app is closed\n        // or the server does not return anymore data.\n        ,\n        onClick: function onClick() {\n          _this3.getDataFromServer();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Start Streaming Data\"), React.createElement(\"div\", {\n        className: \"Graph\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, this.renderGraph())));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\ansfa\\OneDrive\\Desktop\\Projects\\InsideSherpa\\JPMC-tech-task-2-PY3\\src\\App.tsx"],"names":["React","Component","DataStreamer","Graph","App","props","state","data","getData","serverResponds","setState","getDataFromServer","renderGraph"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAA4C,gBAA5C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AAEA;;;;AAOA;;;;IAIMC,G;;;;;AACJ,eAAYC,KAAZ,EAAuB;AAAA;;AAAA;;AACrB,6EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACX;AACA;AACAC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAHqB;AAQtB;AAED;;;;;;;kCAGc;AACZ,aAAQ,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACD;AAED;;;;;;wCAGoB;AAAA;;AAClBL,MAAAA,YAAY,CAACM,OAAb,CAAqB,UAACC,cAAD,EAAqC;AACxD;AACA;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEH,UAAAA,IAAI,+BAAM,MAAI,CAACD,KAAL,CAAWC,IAAjB,sBAA0BE,cAA1B;AAAN,SAAd;AACD,OAJD;AAKD;AAED;;;;;;6BAGS;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAIE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,+BAAlB,CACE;AACA;AACA;AACA;AACA;AALF;AAME,QAAA,OAAO,EAAE,mBAAM;AAAC,UAAA,MAAI,CAACE,iBAAL;AAAyB,SAN3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAUE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,WAAL,EADH,CAVF,CAJF,CADF;AAqBD;;;;EAtDeX,S;;AAyDlB,eAAeG,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport DataStreamer, { ServerRespond } from './DataStreamer';\r\nimport Graph from './Graph';\r\nimport './App.css';\r\n\r\n/**\r\n * State declaration for <App />\r\n */\r\ninterface IState {\r\n  data: ServerRespond[],\r\n}\r\n\r\n/**\r\n * The parent element of the react app.\r\n * It renders title, button and Graph react element.\r\n */\r\nclass App extends Component<{}, IState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // data saves the server responds.\r\n      // We use this state to parse data down to the child element (Graph) as element property\r\n      data: [],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Render Graph react component with state.data parse as property data\r\n   */\r\n  renderGraph() {\r\n    return (<Graph data={this.state.data}/>)\r\n  }\r\n\r\n  /**\r\n   * Get new data from server and update the state with the new data\r\n   */\r\n  getDataFromServer() {\r\n    DataStreamer.getData((serverResponds: ServerRespond[]) => {\r\n      // Update the state by creating a new array of data that consists of\r\n      // Previous data in the state and the new data from server\r\n      this.setState({ data: [...this.state.data, ...serverResponds] });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Render the App react component\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          Bank & Merge Co Task 2\r\n        </header>\r\n        <div className=\"App-content\">\r\n          <button className=\"btn btn-primary Stream-button\"\r\n            // when button is click, our react app tries to request\r\n            // new data from the server.\r\n            // As part of your task, update the getDataFromServer() function\r\n            // to keep requesting the data every 100ms until the app is closed\r\n            // or the server does not return anymore data.\r\n            onClick={() => {this.getDataFromServer()}}>\r\n            Start Streaming Data\r\n          </button>\r\n          <div className=\"Graph\">\r\n            {this.renderGraph()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}