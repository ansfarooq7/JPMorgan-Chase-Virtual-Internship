{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ansfa\\\\OneDrive\\\\Desktop\\\\Projects\\\\InsideSherpa\\\\JPMC-tech-task-2-PY3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport './Graph.css';\n/**\r\n * Props declaration for <Graph />\r\n */\n\n/**\r\n * React component that renders Perspective based on data\r\n * parsed from its parent through data property.\r\n */\nvar Graph =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Graph, _Component);\n\n  function Graph() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Graph)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.table = void 0;\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement('perspective-viewer');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Get element to attach the table from the DOM.\n      // Simplified the definition of 'const elem' as PerspectiveViewerElement now extends HTMLElement\n      var elem = document.getElementsByTagName('perspective-viewer')[0];\n      var schema = {\n        stock: 'string',\n        top_ask_price: 'float',\n        top_bid_price: 'float',\n        timestamp: 'date'\n      };\n\n      if (window.perspective && window.perspective.worker()) {\n        this.table = window.perspective.worker().table(schema);\n      }\n\n      if (this.table) {\n        // Load the `table` in the `<perspective-viewer>` DOM reference.\n        // Add more Perspective configurations here.\n        elem.load(this.table);\n        elem.setAttribute('view', 'y_line'); // We want to visualise the data as a y-line graph\n\n        elem.setAttribute('column-pivots', '[\"stock\"]'); // Show the stocks on the y-axis\n\n        elem.setAttribute('row-pivots', '[\"timestamp\"]'); // Map the stocks to timestamps on x-axis\n\n        elem.setAttribute('columns', '[\"top_ask_price\"]'); // Focus on stock's top_ask_price only along y-axis\n        // Handle duplicated data, only consider unique if stock name and timestamp are unique\n        // Otherwise, average out top_bid_prices and top_ask_prices before treating them as one\n\n        elem.setAttribute('aggregates', \"\\n        {\\\"stock\\\":\\\"distinct count\\\",\\n        \\\"top_ask_price\\\":\\\"avg\\\",\\n        \\\"top_bid_price\\\":\\\"avg\\\",\\n        \\\"timestamp\\\":\\\"distinct count\\\"}\");\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Everytime the data props is updated, insert the data into Perspective table\n      if (this.table) {\n        // As part of the task, you need to fix the way we update the data props to\n        // avoid inserting duplicated entries into Perspective table again.\n        this.table.update(this.props.data.map(function (el) {\n          // Format the data from ServerRespond to the schema\n          return {\n            stock: el.stock,\n            top_ask_price: el.top_ask && el.top_ask.price || 0,\n            top_bid_price: el.top_bid && el.top_bid.price || 0,\n            timestamp: el.timestamp\n          };\n        }));\n      }\n    }\n  }]);\n\n  return Graph;\n}(Component);\n\nexport default Graph;","map":{"version":3,"sources":["C:\\Users\\ansfa\\OneDrive\\Desktop\\Projects\\InsideSherpa\\JPMC-tech-task-2-PY3\\src\\Graph.tsx"],"names":["React","Component","Graph","table","createElement","elem","document","getElementsByTagName","schema","stock","top_ask_price","top_bid_price","timestamp","window","perspective","worker","load","setAttribute","update","props","data","map","el","top_ask","price","top_bid"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGA,OAAO,aAAP;AAEA;;;;AAeA;;;;IAIMC,K;;;;;;;;;;;;;;;;;UAEJC,K;;;;;;6BAES;AACP,aAAOH,KAAK,CAACI,aAAN,CAAoB,oBAApB,CAAP;AACD;;;wCAEmB;AAClB;AACA;AACA,UAAMC,IAAI,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,oBAA9B,EAAoD,CAApD,CAAb;AAEA,UAAMC,MAAM,GAAG;AACbC,QAAAA,KAAK,EAAE,QADM;AAEbC,QAAAA,aAAa,EAAE,OAFF;AAGbC,QAAAA,aAAa,EAAE,OAHF;AAIbC,QAAAA,SAAS,EAAE;AAJE,OAAf;;AAOA,UAAIC,MAAM,CAACC,WAAP,IAAsBD,MAAM,CAACC,WAAP,CAAmBC,MAAnB,EAA1B,EAAuD;AACrD,aAAKZ,KAAL,GAAaU,MAAM,CAACC,WAAP,CAAmBC,MAAnB,GAA4BZ,KAA5B,CAAkCK,MAAlC,CAAb;AACD;;AACD,UAAI,KAAKL,KAAT,EAAgB;AACd;AAEA;AACAE,QAAAA,IAAI,CAACW,IAAL,CAAU,KAAKb,KAAf;AACAE,QAAAA,IAAI,CAACY,YAAL,CAAkB,MAAlB,EAA0B,QAA1B,EALc,CAKuB;;AACrCZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,eAAlB,EAAmC,WAAnC,EANc,CAMmC;;AACjDZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,YAAlB,EAAgC,eAAhC,EAPc,CAOoC;;AAClDZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,SAAlB,EAA6B,mBAA7B,EARc,CAQqC;AACnD;AACA;;AACAZ,QAAAA,IAAI,CAACY,YAAL,CAAkB,YAAlB;AAKD;AACF;;;yCAEoB;AACnB;AACA,UAAI,KAAKd,KAAT,EAAgB;AACd;AACA;AACA,aAAKA,KAAL,CAAWe,MAAX,CAAkB,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,GAAhB,CAAoB,UAACC,EAAD,EAAa;AACjD;AACA,iBAAO;AACLb,YAAAA,KAAK,EAAEa,EAAE,CAACb,KADL;AAELC,YAAAA,aAAa,EAAEY,EAAE,CAACC,OAAH,IAAcD,EAAE,CAACC,OAAH,CAAWC,KAAzB,IAAkC,CAF5C;AAGLb,YAAAA,aAAa,EAAEW,EAAE,CAACG,OAAH,IAAcH,EAAE,CAACG,OAAH,CAAWD,KAAzB,IAAkC,CAH5C;AAILZ,YAAAA,SAAS,EAAEU,EAAE,CAACV;AAJT,WAAP;AAMD,SARiB,CAAlB;AASD;AACF;;;;EAzDiBX,S;;AA4DpB,eAAeC,KAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table } from '@finos/perspective';\r\nimport { ServerRespond } from './DataStreamer';\r\nimport './Graph.css';\r\n\r\n/**\r\n * Props declaration for <Graph />\r\n */\r\ninterface IProps {\r\n  data: ServerRespond[],\r\n}\r\n\r\n/**\r\n * Perspective library adds load to HTMLElement prototype.\r\n * This interface acts as a wrapper for Typescript compiler.\r\n */\r\ninterface PerspectiveViewerElement extends HTMLElement{\r\n  load: (table: Table) => void,\r\n}\r\n\r\n/**\r\n * React component that renders Perspective based on data\r\n * parsed from its parent through data property.\r\n */\r\nclass Graph extends Component<IProps, {}> {\r\n  // Perspective table\r\n  table: Table | undefined;\r\n\r\n  render() {\r\n    return React.createElement('perspective-viewer');\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Get element to attach the table from the DOM.\r\n    // Simplified the definition of 'const elem' as PerspectiveViewerElement now extends HTMLElement\r\n    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\r\n\r\n    const schema = {\r\n      stock: 'string',\r\n      top_ask_price: 'float',\r\n      top_bid_price: 'float',\r\n      timestamp: 'date',\r\n    };\r\n\r\n    if (window.perspective && window.perspective.worker()) {\r\n      this.table = window.perspective.worker().table(schema);\r\n    }\r\n    if (this.table) {\r\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\r\n\r\n      // Add more Perspective configurations here.\r\n      elem.load(this.table);\r\n      elem.setAttribute('view', 'y_line'); // We want to visualise the data as a y-line graph\r\n      elem.setAttribute('column-pivots', '[\"stock\"]'); // Show the stocks on the y-axis\r\n      elem.setAttribute('row-pivots', '[\"timestamp\"]'); // Map the stocks to timestamps on x-axis\r\n      elem.setAttribute('columns', '[\"top_ask_price\"]'); // Focus on stock's top_ask_price only along y-axis\r\n      // Handle duplicated data, only consider unique if stock name and timestamp are unique\r\n      // Otherwise, average out top_bid_prices and top_ask_prices before treating them as one\r\n      elem.setAttribute('aggregates', `\r\n        {\"stock\":\"distinct count\",\r\n        \"top_ask_price\":\"avg\",\r\n        \"top_bid_price\":\"avg\",\r\n        \"timestamp\":\"distinct count\"}`);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Everytime the data props is updated, insert the data into Perspective table\r\n    if (this.table) {\r\n      // As part of the task, you need to fix the way we update the data props to\r\n      // avoid inserting duplicated entries into Perspective table again.\r\n      this.table.update(this.props.data.map((el: any) => {\r\n        // Format the data from ServerRespond to the schema\r\n        return {\r\n          stock: el.stock,\r\n          top_ask_price: el.top_ask && el.top_ask.price || 0,\r\n          top_bid_price: el.top_bid && el.top_bid.price || 0,\r\n          timestamp: el.timestamp,\r\n        };\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n"]},"metadata":{},"sourceType":"module"}